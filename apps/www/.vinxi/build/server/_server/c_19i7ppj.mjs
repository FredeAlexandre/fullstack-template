import{c as o,a as s,f as i,d as n,p as e,C as m}from"./auth.mjs";import{queryOptions as a}from"@tanstack/react-query";import{eq as p}from"drizzle-orm";import"./http.mjs";import"h3";import"node:async_hooks";import"@tanstack/react-router";import"fs";import"path";import"os";import"crypto";import"drizzle-orm/node-postgres";import"better-auth";import"better-auth/adapters/drizzle";import"better-auth/plugins";import"drizzle-orm/pg-core";import"drizzle-orm/mysql-core";import"drizzle-orm/sqlite-core";import"zod";const c=o({method:"GET"}).handler(s(d),async()=>{const r=await i();if(!r)throw new Error("User not connected");return n.select().from(e).where(p(e.userId,r.user.id))}),b=()=>a({queryKey:["projects"],queryFn:()=>c()}),u=o({method:"POST"}).validator(r=>m.omit({userId:!0}).parse(r)).handler(s(f),async({data:r})=>{const t=await i();if(!t)throw new Error("User not connected");await n.insert(e).values({userId:t.user.id,...r})});function d(r){return c.__executeServer(r)}function f(r){return u.__executeServer(r)}export{d as $$function0,f as $$function1,u as createProjectFn,c as fetchUserProjects,b as userProjectsQueryOptions};
